byte baseEffectPos = 0;

float beatPulse; 
float beSin;

int baseBeatCount;


void BaseEffectTick()
{

  baseEffectPos++;
  if (baseEffectPos >= 10) baseEffectPos = 0;

  switch (BASE_EFFECT)
  {
    case 50: 
      beatPulse = (float)(millis() - lastBeat) / (float)beatTempo;

      // from 0 to 0.5: 1 to 0.8
      // from 0.5 to 0: 0.8 to 1
      if (beatPulse < 0.5)
      {
        beatPulse = 1 - beatPulse;
      }
      else
      {
        beatPulse = beatPulse);

      }
      beatPulse = 1 - (pow(beatPulse, 4) / 2);
      

      break;
  
    case 51: case 52: 
      beatPulse = (float)(millis() - lastBeat) / (float)beatTempo;

      break;
    case 53: 
      beatPulse = (float)(millis() - lastBeat) / (float)beatTempo;

      break;

    case 60: case 61: case 62: case 63:
      effect1.Tick(); 
      break;
     
    case 80:
      BaseRainbow += 3;
      break;

      
    
  }

  
}

void BaseBeat()
{
  baseBeatCount++; 

  switch (BASE_EFFECT)
  {
    case 60: 
      effect1.NewBaseExplosion(8, 8, 1);
      break;
      
    case 61: 
      effect1.NewBaseExplosion(8, 8, 5);
      break;

    case 62: 
      effect1.NewBaseExplosion(0, 0, 1);
      effect1.NewBaseExplosion(16, 0, 1);
      effect1.NewBaseExplosion(0, 16, 1);
      effect1.NewBaseExplosion(16, 16, 1);
      break;

    case 63: 
      effect1.NewBaseExplosion(0, 0, 5);
      effect1.NewBaseExplosion(16, 0, 5);
      effect1.NewBaseExplosion(0, 16, 5);
      effect1.NewBaseExplosion(16, 16, 5);
      break;

    
  }

  
}

void BaseEffectReadyPixel(byte *x, byte *y)
{
  int d; 
   beSin = (sin(beatPulse * 3.141 * 2 + *x  + *y) + 1) / 2; 
  switch (BASE_EFFECT)
  {
    case 51: 
      d = sqrt(pow(8 - *x, 2) + pow(8 - *y, 2));

      beSin = beatPulse - ((float)d / 12) * 1;
      if (beSin < 0) beSin++;
      if (beSin > 1) beSin--;

      break;

    case 52: 
     
      d = sqrt(pow(8 - *x, 2));

      beSin = beatPulse - ((float)d / 12) * 1;
      if (beSin < 0) beSin++;

      break;

    case 53: 
     
      d = sqrt(pow(8 - *x, 2) + pow(8 - *y, 2));

      beSin = beatPulse - ((float)d / 12) * 1;
      if (beSin < 0) beSin++;

      beSin = 1 - pow(beSin * 2 - 1, 2);


      break;

  }
}
  
void ApplyBaseEffect(byte *r, byte *g, byte *b, byte *x, byte *y, byte *i)
{ 
  switch (BASE_EFFECT)
  {
    case 1: 
      if (*i == baseEffectPos)
      {
        leave normal
      }
      else
      {
        *r = *r * 0.8;
        *g = *g * 0.8;
        *b = *b * 0.8;
      }
      break;
  
    case 10: 
      if (*i == baseEffectPos)
      {      
        GetBaseColor(r, g, b);
      }
      break;
  
    case 50:
      *r = *r * beatPulse;
      *g = *g * beatPulse;
      *b = *b * beatPulse;
      break;

    case 51: case 52: case 53: 

      *r = *r * beSin;
      *g = *g * beSin;
      *b = *b * beSin;


      break;


    case 55:
      
      if ((*x + (*y % 2)) % 2 == baseBeatCount % 2)
      {
        GetBaseColor(r, g, b);
      }
      else
      {
        GetSecondColor(r, g, b);
      }
      break;
      
    case 56: 
      
      if ((*x/2 + (*y/2 % 2)) % 2 == baseBeatCount % 2)
      {
        GetBaseColor(r, g, b);
      }
      else
      {
        GetSecondColor(r, g, b);
      }
      break;


    case 80: 
      
      Wheel(BaseRainbow + *i * 8, r, g, b);   
      break;
      
    
  }
  

  
}
